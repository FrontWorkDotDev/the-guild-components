// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`remark-npm2yarn > should convert to tabs 1`] = `
"/*@jsxRuntime automatic @jsxImportSource react*/
const {jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    pre: \\"pre\\",
    code: \\"code\\",
    span: \\"span\\"
  }, _provideComponents(), props.components), {$Tabs, $Tab} = _components;
  if (!$Tab) _missingMdxReference(\\"$Tab\\", true);
  if (!$Tabs) _missingMdxReference(\\"$Tabs\\", true);
  return _jsxs($Tabs, {
    items: [\\"npm\\", \\"pnpm\\", \\"yarn\\"],
    storageKey: \\"testKey\\",
    children: [_jsx($Tab, {
      children: _jsx(_components.pre, {
        \\"data-language\\": \\"sh\\",
        \\"data-theme\\": \\"default\\",
        filename: \\"Terminal\\",
        children: _jsx(_components.code, {
          \\"data-language\\": \\"sh\\",
          \\"data-theme\\": \\"default\\",
          children: _jsxs(_components.span, {
            className: \\"line\\",
            children: [_jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-function)\\"
              },
              children: \\"npm\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"i\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"-D\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"@graphql-eslint/eslint-plugin\\"
            })]
          })
        })
      })
    }), _jsx($Tab, {
      children: _jsx(_components.pre, {
        \\"data-language\\": \\"sh\\",
        \\"data-theme\\": \\"default\\",
        filename: \\"Terminal\\",
        children: _jsx(_components.code, {
          \\"data-language\\": \\"sh\\",
          \\"data-theme\\": \\"default\\",
          children: _jsxs(_components.span, {
            className: \\"line\\",
            children: [_jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-function)\\"
              },
              children: \\"pnpm\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"add\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"-D\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"@graphql-eslint/eslint-plugin\\"
            })]
          })
        })
      })
    }), _jsx($Tab, {
      children: _jsx(_components.pre, {
        \\"data-language\\": \\"sh\\",
        \\"data-theme\\": \\"default\\",
        filename: \\"Terminal\\",
        children: _jsx(_components.code, {
          \\"data-language\\": \\"sh\\",
          \\"data-theme\\": \\"default\\",
          children: _jsxs(_components.span, {
            className: \\"line\\",
            children: [_jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-function)\\"
              },
              children: \\"yarn\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"add\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"--dev\\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-color-text)\\"
              },
              children: \\" \\"
            }), _jsx(_components.span, {
              style: {
                color: \\"var(--shiki-token-string)\\"
              },
              children: \\"@graphql-eslint/eslint-plugin\\"
            })]
          })
        })
      })
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error(\\"Expected \\" + (component ? \\"component\\" : \\"object\\") + \\" \`\\" + id + \\"\` to be defined: you likely forgot to import, pass, or provide it.\\");
}
"
`;
